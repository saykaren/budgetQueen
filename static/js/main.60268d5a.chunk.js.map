{"version":3,"sources":["components/assets/sayKaren_Logo_transparent_7.2019.png","components/app/Footer.tsx","components/app/SampleData.tsx","components/app/IncomeDetails.tsx","components/app/ExpenseCategoryDetails.tsx","components/app/ExpenseDetails.tsx","components/app/ComparisonDetails.tsx","components/app/TestSend.tsx","components/app/BudgetBox.tsx","components/app/App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","className","href","target","rel","src","sayKarenLogo","alt","TestData","monthId","monthName","year","begBalance","endBalance","budget","monthExpenses","housingExpense","title","amount","monthIN","groceryExpense","discretionaryExpense","retirementSavings","collegeSavings","otherExpense","monthContributions","actual","IncomeDetails","object","map","budgetNum","indexbudget","key","mc","mcIndex","actualNum","actIndexbudget","ac","acIndex","compare","comIndex","comparison","compIndex","ExpenseCategoryDetails","section","heIndex","ExpenseDetails","he","ge","geIndex","ComparsionDetails","TestSend","console","log","BudgetBox","useState","SampleData","data","num","numIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60268d5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sayKaren_Logo_transparent_7.2019.4ee98378.png\";","import React from 'react';\nimport sayKarenLogo from '../assets/sayKaren_Logo_transparent_7.2019.png';\n\nconst Footer= ()=> (\n    <footer\n        id=\"footer\"\n        className=\"footerDetails\"\n    >\n        Website created by:\n        <a\n            href=\"http://saykaren.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <img src={sayKarenLogo}\n                 className=\"footerDetails\"\n                 id=\"sayKarenLogo\"\n                 alt=\"sayKaren.com\"\n            />\n        </a>\n    </footer>\n\n\n);\n\nexport default Footer","export const TestData = [\n  {\n    monthId: 1,\n    monthName: \"January\",\n    year: 2020,\n    begBalance: 4000,\n    endBalance: 2900,\n    budget: [\n      {\n        monthExpenses: {\n          housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n          groceryExpense: [\n            { title: \"King Soopers\", amount: 500, monthIN: 1 },\n            { title: \"Costco\", amount: 400, monthIN: 1 },\n          ],\n\n          discretionaryExpense: [{ title: \"Amazon\", amount: 200, monthIN: 1 }],\n\n          retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n\n          collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n\n          otherExpense: [\n            { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n          ],\n        },\n        monthContributions: [\n          { title: \"Side gig\", amount: 100, monthIN: 1 },\n          { title: \"Payroll\", amount: 2000, monthIN: 1 },\n        ],\n      },\n    ],\n    actual: [\n      {\n        monthExpenses: {\n          housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n\n          groceryExpense: [\n            { title: \"King Soopers\", amount: 500, monthIN: 1 },\n            { title: \"Costco\", amount: 400, monthIN: 1 },\n          ],\n\n          discretionaryExpense: [{ title: \"Amazon\", amount: 200, monthIN: 1 }],\n\n          retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n\n          collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n\n          otherExpense: [\n            { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n          ],\n        },\n\n        monthContributions: [\n          { title: \"Side gig\", amount: 52, monthIN: 1 },\n          { title: \"Payroll\", amount: 2003, monthIN: 1 },\n        ],\n      },\n    ],\n  },\n  // {\n  //   monthId: 2,\n  //   monthName: \"February\",\n  //   year: 2020,\n  //   begBalance: 4000,\n  //   endBalance: 2900,\n  //   budget: [\n  //     {\n  //       monthExpenses: [\n  //         {\n  //           housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n  //         },\n  //         {\n  //           groceryExpense: [\n  //             { title: \"King Soopers\", amount: 500, monthIN: 1 },\n  //             { title: \"Costco\", amount: 400, monthIN: 1 },\n  //           ],\n  //         },\n  //         {\n  //           discretionaryExpense: [\n  //             { title: \"Amazon\", amount: 200, monthIN: 1 },\n  //           ],\n  //         },\n  //         {\n  //           retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n  //         },\n  //         {\n  //           collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n  //         },\n  //         {\n  //           otherExpense: [\n  //             { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n  //           ],\n  //         },\n  //       ],\n  //       monthContributions: [\n  //         { title: \"Side gig\", amount: 100, monthIN: 1 },\n  //         { title: \"Payroll\", amount: 2000, monthIN: 1 },\n  //       ],\n  //     },\n  //   ],\n  //   actual: [\n  //     {\n  //       monthExpenses: [\n  //         {\n  //           housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n  //         },\n  //         {\n  //           groceryExpense: [\n  //             { title: \"King Soopers\", amount: 500, monthIN: 1 },\n  //             { title: \"Costco\", amount: 400, monthIN: 1 },\n  //           ],\n  //         },\n  //         {\n  //           discretionaryExpense: [\n  //             { title: \"Amazon\", amount: 200, monthIN: 1 },\n  //           ],\n  //         },\n  //         {\n  //           retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n  //         },\n  //         {\n  //           collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n  //         },\n  //         {\n  //           otherExpense: [\n  //             { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n  //           ],\n  //         },\n  //       ],\n  //       monthContributions: [\n  //         { title: \"Side gig\", amount: 75, monthIN: 1 },\n  //         { title: \"Payroll\", amount: 2501, monthIN: 1 },\n  //       ],\n  //     },\n  //   ],\n  // },\n];\n\nexport default TestData;\n\n// export const TestData =\n// [\n//   {\n//     monthId: 1,\n//     monthName: \"January\",\n//     year: 2020,\n//     begBalance: 4000,\n//     endBalance: 2900,\n//     budget: [\n//       {\n//         monthExpenses: [\n//           {\n//             housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n//           },\n//           {\n//             groceryExpense: [\n//               { title: \"King Soopers\", amount: 500, monthIN: 1 },\n//               { title: \"Costco\", amount: 400, monthIN: 1 },\n//             ],\n//           },\n//           {\n//             discretionaryExpense: [\n//               { title: \"Amazon\", amount: 200, monthIN: 1 },\n//             ],\n//           },\n//           {\n//             retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n//           },\n//           {\n//             collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n//           },\n//           {\n//             otherExpense: [\n//               { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n//             ],\n//           },\n//         ],\n//         monthContributions: [\n//           { title: \"Side gig\", amount: 100, monthIN: 1 },\n//           { title: \"Payroll\", amount: 2000, monthIN: 1 },\n//         ],\n//       },\n//     ],\n//     actual: [\n//       {\n//         monthExpenses: [\n//           {\n//             housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n//           },\n//           {\n//             groceryExpense: [\n//               { title: \"King Soopers\", amount: 500, monthIN: 1 },\n//               { title: \"Costco\", amount: 400, monthIN: 1 },\n//             ],\n//           },\n//           {\n//             discretionaryExpense: [\n//               { title: \"Amazon\", amount: 200, monthIN: 1 },\n//             ],\n//           },\n//           {\n//             retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n//           },\n//           {\n//             collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n//           },\n//           {\n//             otherExpense: [\n//               { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n//             ],\n//           },\n//         ],\n//         monthContributions: [\n//           { title: \"Side gig\", amount: 52, monthIN: 1 },\n//           { title: \"Payroll\", amount: 2003, monthIN: 1 },\n//         ],\n//       },\n//     ],\n//   },\n//   // {\n//   //   monthId: 2,\n//   //   monthName: \"February\",\n//   //   year: 2020,\n//   //   begBalance: 4000,\n//   //   endBalance: 2900,\n//   //   budget: [\n//   //     {\n//   //       monthExpenses: [\n//   //         {\n//   //           housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           groceryExpense: [\n//   //             { title: \"King Soopers\", amount: 500, monthIN: 1 },\n//   //             { title: \"Costco\", amount: 400, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //         {\n//   //           discretionaryExpense: [\n//   //             { title: \"Amazon\", amount: 200, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //         {\n//   //           retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           otherExpense: [\n//   //             { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //       ],\n//   //       monthContributions: [\n//   //         { title: \"Side gig\", amount: 100, monthIN: 1 },\n//   //         { title: \"Payroll\", amount: 2000, monthIN: 1 },\n//   //       ],\n//   //     },\n//   //   ],\n//   //   actual: [\n//   //     {\n//   //       monthExpenses: [\n//   //         {\n//   //           housingExpense: [{ title: \"Rent\", amount: 1800, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           groceryExpense: [\n//   //             { title: \"King Soopers\", amount: 500, monthIN: 1 },\n//   //             { title: \"Costco\", amount: 400, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //         {\n//   //           discretionaryExpense: [\n//   //             { title: \"Amazon\", amount: 200, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //         {\n//   //           retirementSavings: [{ title: \"Roth\", amount: 100, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           collegeSavings: [{ title: \"529\", amount: 100, monthIN: 1 }],\n//   //         },\n//   //         {\n//   //           otherExpense: [\n//   //             { title: \"Extra Mortgage Payment\", amount: 100, monthIN: 1 },\n//   //           ],\n//   //         },\n//   //       ],\n//   //       monthContributions: [\n//   //         { title: \"Side gig\", amount: 75, monthIN: 1 },\n//   //         { title: \"Payroll\", amount: 2501, monthIN: 1 },\n//   //       ],\n//   //     },\n//   //   ],\n//   // },\n// ];\n\n// export default TestData;\n","import React from \"react\";\nimport {TestDataProps} from \"./TestDataInterface\";\n\ninterface IncomeDetailsProp {\n    title: string;\n    object: TestDataProps;\n}\n\nconst IncomeDetails = ({ title, object}: IncomeDetailsProp)=>{\n    return(\n        <div className=\"budget-income-box\">\n        <h2>{title}</h2>\n        <section className=\"estimate-actual-holder\">\n          {object.budget.map((budgetNum, indexbudget) => (\n            <>\n              <div className=\"budget-estimate-income\" key={indexbudget}>\n                <h3>Estimates</h3>\n                {budgetNum.monthContributions.map((mc, mcIndex) => (\n                  <div\n                    className=\"budget-income\"\n                    id={`est${mcIndex}`}\n                    key={mcIndex}\n                  >\n                    {mc.title} ${mc.amount}\n                  </div>\n                ))}\n              </div>\n            </>\n          ))}\n          {object.actual.map((actualNum, actIndexbudget) => (\n            <>\n              <div className=\"budget-actual-income\" key={actIndexbudget}>\n                <h3>Actual</h3>\n                {actualNum.monthContributions.map((ac, acIndex) => (\n                  <div\n                    className=\"budget-income\"\n                    id={`act${acIndex}`}\n                    key={acIndex}\n                  >\n                    {ac.title} ${ac.amount}\n                  </div>\n                ))}\n              </div>\n            </>\n          ))}\n          {object.actual.map((compare, comIndex) => (\n            <>\n              <div className=\"budget-actual-income\">\n                <h3>Comparison</h3>\n                {compare.monthContributions.map((comparison, compIndex) => (\n                  <div className=\"budget-income\" key={compIndex}>\n                    Comparison here\n                  </div>\n                ))}\n              </div>\n            </>\n          ))}\n        </section>\n      </div>\n    )\n}\n\nexport default IncomeDetails;","import React from 'react';\nimport { expenseCategoriesProps, TestDataProps, expenseContributions } from './TestDataInterface';\n\ninterface ExpenseCategoryDetailsProps {\n    title: string;\n    object: expenseCategoriesProps;\n   \n}\n\nconst ExpenseCategoryDetails = ({title, object} : ExpenseCategoryDetailsProps) =>{\n    const categories = ['housingExpense', 'groceryExpense', 'discretionaryExpense', 'retirementSavings', 'collegeSavings', 'otherExpense']\n    \n    return(\n        <>\n        {/* {categories.map((num, index)=>(\n            {`{$num}`.title}\n        ))} */}\n        <div className=\"expenseCategories\"> \n        <h4>{title}</h4>\n        {object.housingExpense.map((section, heIndex) => (\n          <div\n            className=\"budget-income\"\n            id={`est${heIndex}`}\n            key={heIndex}\n          >\n            {section.title} ${section.amount}\n          </div>\n        ))}\n      </div>\n      </>\n    )\n}\n\nexport default ExpenseCategoryDetails;","import React from \"react\";\nimport { TestDataProps } from \"./TestDataInterface\";\nimport ExpenseCategoryDetails from \"./ExpenseCategoryDetails\";\n\ninterface ExpenseDetailsProp {\n  title: string;\n  object: TestDataProps;\n}\n\nconst ExpenseDetails = ({ title, object }: ExpenseDetailsProp) => {\n  return (\n    <div className=\"budget-income-box\">\n      <h2>{title}</h2>\n      <section className=\"estimate-actual-holder\">\n        {object.budget.map((budgetNum, indexbudget) => (\n          <>\n            <div className=\"budget-estimate-income\" key={indexbudget}>\n              <h3>Estimates</h3>\n              <div className=\"expenseCategories\">\n                <h4>Housing Expense</h4>\n\n                {budgetNum.monthExpenses.housingExpense.map((he, heIndex) => (\n                  <div\n                    className=\"budget-income\"\n                    id={`est${heIndex}`}\n                    key={heIndex}\n                  >\n                    {he.title} ${he.amount}\n                  </div>\n                ))}\n              </div>\n              <div className=\"expenseCategories\">\n                <h4>Grocery Expense</h4>\n\n                {budgetNum.monthExpenses.groceryExpense.map((ge, geIndex) => (\n                  <div\n                    className=\"budget-income\"\n                    id={`est${geIndex}`}\n                    key={geIndex}\n                  >\n                    {ge.title} ${ge.amount}\n                  </div>\n                ))}\n              </div>\n              <ExpenseCategoryDetails title=\"expense2\" object={budgetNum.monthExpenses}/>\n            </div>\n            \n          </>\n        ))}\n        {object.actual.map((actualNum, actIndexbudget) => (\n          <>\n            <div className=\"budget-actual-income\" key={actIndexbudget}>\n              <h3>Actual</h3>\n              {actualNum.monthContributions.map((ac, acIndex) => (\n                <div\n                  className=\"budget-income\"\n                  id={`act${acIndex}`}\n                  key={acIndex}\n                >\n                  {ac.title} ${ac.amount}\n                </div>\n              ))}\n            </div>\n          </>\n        ))}\n        {object.actual.map((compare, comIndex) => (\n          <>\n            <div className=\"budget-actual-income\">\n              <h3>Comparison</h3>\n              {compare.monthContributions.map((comparison, compIndex) => (\n                <div className=\"budget-income\" key={compIndex}>\n                  Comparison here\n                </div>\n              ))}\n            </div>\n          </>\n        ))}\n      </section>\n    </div>\n  );\n};\n\nexport default ExpenseDetails;\n","import React from \"react\";\nimport { TestDataProps } from \"./TestDataInterface\";\nimport IncomeDetails from \"./IncomeDetails\";\nimport ExpenseDetails from \"./ExpenseDetails\";\n\ninterface ComparsionDetailsProp {\n  title: string;\n  object: TestDataProps;\n}\n\nconst ComparsionDetails = ({ title, object }: ComparsionDetailsProp) => {\n  return (\n<>\n    <IncomeDetails title='Income' object={object}/>\n    <ExpenseDetails title='Expense' object={object}/>\n    </>\n    \n  );\n};\n\nexport default ComparsionDetails;\n","import React from 'react';\nimport {TestDataProps} from './TestDataInterface';\n// import expenseContributions from './TestDataInterface';\n\ninterface ComparsionDetailsProp {\n    title: string;\n    object: TestDataProps;\n}\n\nconst TestSend = ({title, object}: ComparsionDetailsProp)=>{\n    \n    console.log(object);\n    return(\n        <div className=\"budget-income-box\">\n \n      </div>\n    )\n}\n\nexport default TestSend;","import React, { useState } from \"react\";\nimport TestDataInterface, { SampleDataArrayProps } from \"./TestDataInterface\";\nimport SampleData from \"./SampleData\";\nimport ComparsionDetails from \"./ComparisonDetails\";\nimport TestSend from \"./TestSend\";\n\nconst BudgetBox = () => {\n  const [data, setData] = useState(SampleData);\n\n  console.log(data);\n  return (\n    <div className=\"budgetBox\">\n      <TestSend title={\"Hello\"} object={data[0]} />\n      {data &&\n        data.map((num, numIndex) => (\n          <div key={numIndex}>\n            <h2>{num.monthName}</h2>\n            <div className=\"budget-overall-box\">\n              <div className=\"budget-detail\">\n                {\" \"}\n                Beginning Balance ${num.begBalance}\n              </div>\n              <div className=\"budget-detail\">\n                Ending Balance ${num.endBalance}\n              </div>\n            </div>\n            <ComparsionDetails title={\"Income2\"} object={num} />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default BudgetBox;\n","import React from \"react\";\nimport \"../styling/App.scss\";\nimport Footer from './Footer';\nimport BudgetBox from './BudgetBox';\n\n\nconst App = () =>{\n  return (\n  <>\n  <BudgetBox />\n  <Footer />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}